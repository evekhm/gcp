#!/usr/bin/env bash

CONFIG='demo'

for i in "$@"; do
  case $i in
    -name=*|--project_name=*)
      PROJECT_NAME="${i#*=}"
      shift # past argument=value
      ;;
    -id=*|--project_id=*)
      PROJECT_ID="${i#*=}"
      shift # past argument=value
      ;;
    -zone=*)
      ZONE="${i#*=}"
      shift # past argument=value
      ;;
    -region=*)
      REGION="${i#*=}"
      shift # past argument=value
      ;;
    -billing=*)
      BILLING="${i#*=}"
      shift # past argument=value
      ;;
    -config=*)
      CONFIG="${i#*=}"
      shift # past argument=value
      ;;
    -account=*)
      ACCOUNT="${i#*=}"
      shift # past argument=value
      ;;
    --default)
      #DEFAULTS
      shift # past argument with no value
      ;;
    *)
      # unknown option
      ;;
  esac
done

if [ -z  "$PROJECT_NAME" ] ; then
  PROJECT_NAME=$PROJECT_ID
fi

if [ -z  "$PROJECT_ID" ]  || [ -z  "$BILLING" ]   || [ -z  "$ZONE" ]  || [ -z  "$REGION" ]  || [ -z "$ACCOUNT" ]; then
  echo "${BASH_SOURCE[0]}" "-id=<project_id> -zone=<zone> -region=<region> -billing=<billing> -account=<account> [-config_name=<config>] [-name=<project_name>]"
  exit 1
fi

echo "$0" project_id="$PROJECT_ID" project_name="$PROJECT_NAME"


function set_config() {
    config_name=$1
    found=$(gcloud config configurations list  --format="csv[no-heading](NAME)" | grep "$config_name")
    if [ -z "$found"  ];
    then
      echo "Creating $config_name environment"
      gcloud config configurations create "$config_name"
    else
      gcloud config configurations activate "$config_name"
    fi
    gcloud config set project "$2"
    gcloud services enable compute.googleapis.com
    gcloud config set compute/zone "$3"
    gcloud config set compute/region "$4"
    gcloud config set account "$5"
    echo "Updating config done for $config_name"
}

# Create Project of not existing
project=$(gcloud projects list --format="value(PROJECT_ID)" | grep "$PROJECT_ID")

if [ -z "$project" ]; then
    echo 'Creating a project'  "$PROJECT_ID"
    gcloud projects create "$PROJECT_ID" --name="$PROJECT_NAME" --set-as-default
fi

echo 'Linking to a billing account'  "$BILLING"
gcloud beta billing projects link "$PROJECT_ID" --billing-account="$BILLING"
set_config "$CONFIG" "$PROJECT_ID" "$ZONE" "$REGION" "$ACCOUNT"

gcloud config configurations list


##### Enable the services required
gcloud services enable compute.googleapis.com \
    pubsub.googleapis.com \
    orgpolicy.googleapis.com \
    bigquery.googleapis.com \
    dataflow.googleapis.com \
    cloudfunctions.googleapis.com \
    logging.googleapis.com \
    storage.googleapis.com \
    cloudbuild.googleapis.com \
    cloudscheduler.googleapis.com


#### Modify policy
echo 'Waiting for enabled APIs to take effect...'
sleep 5
echo 'Updating org policies'
gcloud org-policies reset constraints/cloudfunctions.allowedIngressSettings --project="$PROJECT_ID"
gcloud org-policies reset constraints/compute.requireShieldedVm --project="$PROJECT_ID"
#gcloud org-policies reset cloudfunctions.requireVPCConnector --project=$PROJECT_ID
gcloud org-policies reset compute.restrictNonConfidentialComputing --project=$PROJECT_ID
gcloud org-policies reset cloudbuild.allowedWorkerPools --project=$PROJECT_ID
gcloud org-policies reset gcp.resourceLocations --project=$PROJECT_ID
gcloud org-policies reset iam.disableServiceAccountCreation --project=$PROJECT_ID

# This one is required for DataFlow: The project quota may have been exceeded or access control policies may be preventing the operation; review the Cloud Logging "GCE VM Instance" log for diagnostics.
gcloud org-policies reset --project=$PROJECT_ID  compute.vmExternalIpAccess
sleep 5

#gcloud org-policies list --project=$PROJECT_ID --show-unset --format='value(constraint)' | while read CONSTRAINT
#do
#    echo $CONSTRAINT
#    #gcloud org-policies reset $CONSTRAINT  --project=$PROJECT_ID
#done
