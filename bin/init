#!/usr/bin/env bash
##########################################################################################
# This script sets Project into active Config and Propogates Settings
##########################################################################################
set -u # This prevents running the script if any of the variables have not been set
set -e # Exit if error is detected during pipeline execution

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ID=${PROJECT_ID:-$(gcloud config get-value project 2> /dev/null)}

print="$DIR/print"
$print "Running ${BASH_SOURCE[0]} with PROJECT_ID=$PROJECT_ID, REGION=$REGION, ZONE=$ZONE" INFO

if [ -z $PROJECT_ID ]; then
    $print "Error: PROJECT_ID needs to be set."
    exit 1
fi

if [ -z ${ZONE+x} ]  || [ -z  ${REGION+x} ]; then
  $print "Missing (any of) the required ENV paramters - ZONE / REGION " 'ERROR.'
  exit 1
fi


##################################################################################
#                              HELPER FUNCTIONS
##################################################################################
set_config() {

  gcloud config set project "$PROJECT_ID"
  echo "Enabling compute.googleapis.com API ..."
  gcloud services enable compute.googleapis.com
  gcloud config set compute/zone "$ZONE"
  gcloud config set compute/region "$REGION"
}

create_project() {
  if gcloud projects list --format="value(PROJECT_ID)" | grep "$PROJECT_ID"; then
    $print "Using existing project [$PROJECT_ID]"
  else
    $print "Creating new project [$PROJECT_ID]"
    if [ -z ${BILLING+x} ]; then
      $print "BILLING not set, aborting. Please set BILLING variable" ERROR
      exit 1
    fi
    gcloud projects create "$PROJECT_ID" --name="$PROJECT_ID" --set-as-default
    gcloud beta billing projects link "$PROJECT_ID" --billing-account="$BILLING"
  fi
}

enable_project_apis() {
  APIS="compute.googleapis.com \
    pubsub.googleapis.com \
    bigquery.googleapis.com \
    dataflow.googleapis.com \
    cloudfunctions.googleapis.com \
    logging.googleapis.com \
    storage.googleapis.com \
    cloudbuild.googleapis.com \
    appengine.googleapis.com \
    cloudscheduler.googleapis.com"

  $print "Enabling APIs on the project..."
  gcloud services enable orgpolicy.googleapis.com #To avoid Error for concurrent policy changes.
  gcloud services enable $APIS --async
  # TODO use `gcloud beta services operations wait operations` instead
  echo 'Waiting for Enable APIs operation to take effect...'
  sleep 10
}

update_org_policy(){
  $print  "Updating Org Policies..."
  gcloud org-policies reset constraints/cloudfunctions.allowedIngressSettings --project="$PROJECT_ID"
  gcloud org-policies reset constraints/compute.requireShieldedVm --project="$PROJECT_ID"
  #Needed otherwise CloudFunction gets google.api_core.exceptions.PermissionDenied: 403 User not authorized to perform this action.
  gcloud org-policies reset cloudfunctions.requireVPCConnector --project="$PROJECT_ID"
  gcloud org-policies reset iam.disableServiceAccountCreation --project="$PROJECT_ID"
  # This one is required for DataFlow: The project quota may have been exceeded or access control policies may be preventing the operation; review the Cloud Logging "GCE VM Instance" log for diagnostics.
  gcloud org-policies reset --project="$PROJECT_ID"  compute.vmExternalIpAccess
}

setup_network(){
  network=$(gcloud compute networks list --filter="name=(\"$NETWORK\" )" --format='get(NAME)' 2>/dev/null)
  if [ -z "$network" ]; then
      $print 'Setting up Network...'
      gcloud compute networks create default --project="$PROJECT_ID" --subnet-mode=auto --mtu=1460 --bgp-routing-mode=regional
      gcloud compute firewall-rules create default-allow-internal --project="$PROJECT_ID" \
            --network=projects/"$PROJECT_ID"/global/networks/$NETWORK \
            --description=Allows\ connections\ from\ any\ source\ in\ the\ network\ IP\ range\ to\ any\ instance\ on\ the\ network\ using\ all\ protocols. \
            --direction=INGRESS --priority=65534 --source-ranges=10.128.0.0/9 --action=ALLOW --rules=all
  fi
}
##################################################################################
## Create project if not existing
#create_project

set_config

# Enable the services required
enable_project_apis

# Modify policy
update_org_policy

setup_network



############  Init Project Dependent Variables For Ease of Debugging############
PROJECT_ID=$(gcloud config get-value project 2> /dev/null);
export PROJECT_ID

BUCKET="gs://${PROJECT_ID}-${APPLICATION}"
export BUCKET

PROJECT_NUM=$(gcloud projects describe "$PROJECT_ID" --format='get(projectNumber)')
export PROJECT_NUM

SERVICE_ACCOUNT=${SERVICE_ACCOUNT_NAME}@${PROJECT_ID}.iam.gserviceaccount.com
export SERVICE_ACCOUNT

#gcloud config configurations list

echo "#################################################"
echo "              Project setup complete"
echo "#################################################"
